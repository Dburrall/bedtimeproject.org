{"version":3,"file":"static/js/749.a0f0dfc6.chunk.js","mappings":"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","sources":["../node_modules/@sanity/block-content-to-hyperscript/internals.js","../node_modules/@sanity/block-content-to-hyperscript/src/blocksToNodes.js","../node_modules/@sanity/block-content-to-hyperscript/src/buildMarksTree.js","../node_modules/@sanity/block-content-to-hyperscript/src/generateKeys.js","../node_modules/@sanity/block-content-to-hyperscript/src/getImageUrl.js","../node_modules/@sanity/block-content-to-hyperscript/src/internals.js","../node_modules/@sanity/block-content-to-hyperscript/src/mergeSerializers.js","../node_modules/@sanity/block-content-to-hyperscript/src/nestLists.js","../node_modules/@sanity/block-content-to-hyperscript/src/serializers.js","../node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/generate-help-url/index.js","../node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/image-url/src/parseAssetId.ts","../node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/image-url/src/parseSource.ts","../node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/image-url/src/urlForImage.ts","../node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/image-url/src/builder.ts","../node_modules/@sanity/block-content-to-react/src/BlockContent.js","../node_modules/@sanity/block-content-to-react/src/targets/dom.js","../node_modules/@sanity/block-content-to-react/node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/@sanity/block-content-to-react/node_modules/prop-types/index.js","../node_modules/@sanity/block-content-to-react/node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["module.exports = require('./lib/internals')\n","const objectAssign = require('object-assign')\nconst buildMarksTree = require('./buildMarksTree')\nconst nestLists = require('./nestLists')\nconst generateKeys = require('./generateKeys')\nconst mergeSerializers = require('./mergeSerializers')\n\n// Properties to extract from props and pass to serializers as options\nconst optionProps = ['projectId', 'dataset', 'imageOptions', 'ignoreUnknownTypes']\nconst isDefined = val => typeof val !== 'undefined'\nconst defaults = {imageOptions: {}, ignoreUnknownTypes: true}\n\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  const props = objectAssign({}, defaults, properties)\n  const rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks]\n  const keyedBlocks = generateKeys(rawBlocks)\n  const blocks = nestLists(keyedBlocks, props.listNestMode)\n  const serializers = mergeSerializers(defaultSerializers, props.serializers || {})\n\n  const options = optionProps.reduce((opts, key) => {\n    const value = props[key]\n    if (isDefined(value)) {\n      opts[key] = value\n    }\n    return opts\n  }, {})\n\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node)\n    }\n\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings))\n    }\n\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, {serializeNode})\n    }\n\n    return serializeBlock(node, index, isInline)\n  }\n\n  function findListItemIndex(node, siblings) {\n    let index = 0\n    for (let i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index\n      }\n\n      if (!isListItem(siblings[i])) {\n        continue\n      }\n\n      index++\n    }\n\n    return index\n  }\n\n  function serializeBlock(block, index, isInline) {\n    const tree = buildMarksTree(block)\n    const children = tree.map((node, i, siblings) => serializeNode(node, i, siblings, true))\n    const blockProps = {\n      key: block._key || `block-${index}`,\n      node: block,\n      isInline,\n      serializers,\n      options\n    }\n\n    return h(serializers.block, blockProps, children)\n  }\n\n  function serializeListItem(block, index) {\n    const key = block._key\n    const tree = buildMarksTree(block)\n    const children = tree.map(serializeNode)\n    return h(serializers.listItem, {node: block, serializers, index, key, options}, children)\n  }\n\n  function serializeList(list) {\n    const type = list.listItem\n    const level = list.level\n    const key = list._key\n    const children = list.children.map(serializeNode)\n    return h(serializers.list, {key, level, type, options}, children)\n  }\n\n  // Default to false, so `undefined` will evaluate to the default here\n  const renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild)\n\n  const nodes = blocks.map(serializeNode)\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    const containerProps = props.className ? {className: props.className} : {}\n    return h(serializers.container, containerProps, nodes)\n  }\n\n  if (nodes[0]) {\n    return nodes[0]\n  }\n\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty\n}\n\nfunction isList(block) {\n  return block._type === 'list' && block.listItem\n}\n\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem\n}\n\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span'\n}\n\nmodule.exports = blocksToNodes\n","const defaultMarks = ['strong', 'em', 'code', 'underline', 'strike-through']\n\nconst buildMarksTree = block => {\n  const {children, markDefs} = block\n  if (!children || !children.length) {\n    return []\n  }\n\n  const sortedMarks = children.map(sortMarksByOccurences)\n  const rootNode = {_type: 'span', children: []}\n  let nodeStack = [rootNode]\n\n  children.forEach((span, i) => {\n    const marksNeeded = sortedMarks[i]\n    if (!marksNeeded) {\n      const lastNode = nodeStack[nodeStack.length - 1]\n      lastNode.children.push(span)\n      return\n    }\n\n    let pos = 1\n\n    // Start at position one. Root is always plain and should never be removed. (?)\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = nodeStack[pos].markKey\n        const index = marksNeeded.indexOf(mark)\n        // eslint-disable-next-line max-depth\n        if (index === -1) {\n          break\n        }\n\n        marksNeeded.splice(index, 1)\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos)\n\n    // Add needed nodes\n    let currentNode = findLastParentNode(nodeStack)\n    marksNeeded.forEach(mark => {\n      const node = {\n        _type: 'span',\n        _key: span._key,\n        children: [],\n        mark: markDefs.find(def => def._key === mark) || mark,\n        markKey: mark\n      }\n\n      currentNode.children.push(node)\n      nodeStack.push(node)\n      currentNode = node\n    })\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isTextSpan(span)) {\n      const lines = span.text.split('\\n')\n      for (let line = lines.length; line-- > 1; ) {\n        lines.splice(line, 0, '\\n')\n      }\n\n      currentNode.children = currentNode.children.concat(lines)\n    } else {\n      currentNode.children = currentNode.children.concat(span)\n    }\n  })\n\n  return rootNode.children\n}\n\n// We want to sort all the marks of all the spans in the following order:\n// 1. Marks that are shared amongst the most adjacent siblings\n// 2. Non-default marks (links, custom metadata)\n// 3. Built-in, plain marks (bold, emphasis, code etc)\nfunction sortMarksByOccurences(span, i, spans) {\n  if (!span.marks || span.marks.length === 0) {\n    return span.marks || []\n  }\n\n  const markOccurences = span.marks.reduce((occurences, mark) => {\n    occurences[mark] = occurences[mark] ? occurences[mark] + 1 : 1\n\n    for (let siblingIndex = i + 1; siblingIndex < spans.length; siblingIndex++) {\n      const sibling = spans[siblingIndex]\n\n      if (sibling.marks && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) {\n        occurences[mark]++\n      } else {\n        break\n      }\n    }\n\n    return occurences\n  }, {})\n\n  const sortByOccurence = sortMarks.bind(null, markOccurences)\n\n  // Slicing because sort() mutates the input\n  return span.marks.slice().sort(sortByOccurence)\n}\n\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA] || 0\n  const bOccurences = occurences[markB] || 0\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences\n  }\n\n  const aDefaultPos = defaultMarks.indexOf(markA)\n  const bDefaultPos = defaultMarks.indexOf(markB)\n\n  // Sort default marks last\n  if (aDefaultPos !== bDefaultPos) {\n    return aDefaultPos - bDefaultPos\n  }\n\n  // Sort other marks simply by key\n  if (markA < markB) {\n    return -1\n  } else if (markA > markB) {\n    return 1\n  }\n\n  return 0\n}\n\nfunction isTextSpan(node) {\n  return (\n    node._type === 'span' &&\n    typeof node.text === 'string' &&\n    (Array.isArray(node.marks) || typeof node.marks === 'undefined')\n  )\n}\n\nfunction findLastParentNode(nodes) {\n  for (let i = nodes.length - 1; i >= 0; i--) {\n    const node = nodes[i]\n    if (node._type === 'span' && node.children) {\n      return node\n    }\n  }\n\n  return undefined\n}\n\nmodule.exports = buildMarksTree\n","const objectAssign = require('object-assign')\n\nmodule.exports = blocks => {\n  return blocks.map(block => {\n    if (block._key) {\n      return block\n    }\n\n    return objectAssign({_key: getStaticKey(block)}, block)\n  })\n}\n\nfunction getStaticKey(item) {\n  return checksum(JSON.stringify(item))\n    .toString(36)\n    .replace(/[^A-Za-z0-9]/g, '')\n}\n\n/* eslint-disable no-bitwise */\nfunction checksum(str) {\n  let hash = 0\n  const strlen = str.length\n  if (strlen === 0) {\n    return hash\n  }\n\n  for (let i = 0; i < strlen; i++) {\n    hash = (hash << 5) - hash + str.charCodeAt(i)\n    hash &= hash // Convert to 32bit integer\n  }\n\n  return hash\n}\n/* eslint-enable no-bitwise */\n","const generateHelpUrl = require('@sanity/generate-help-url')\nconst urlBuilder = require('@sanity/image-url')\nconst objectAssign = require('object-assign')\n\nconst enc = encodeURIComponent\nconst materializeError = `You must either:\n  - Pass \\`projectId\\` and \\`dataset\\` to the block renderer\n  - Materialize images to include the \\`url\\` field.\n\nFor more information, see ${generateHelpUrl('block-content-image-materializing')}`\n\nconst getQueryString = options => {\n  const query = options.imageOptions\n  const keys = Object.keys(query)\n  if (!keys.length) {\n    return ''\n  }\n\n  const params = keys.map(key => `${enc(key)}=${enc(query[key])}`)\n  return `?${params.join('&')}`\n}\n\nconst buildUrl = props => {\n  const {node, options} = props\n  const {projectId, dataset} = options\n  const asset = node.asset\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property')\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options)\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError)\n  }\n\n  const ref = asset._ref\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`')\n  }\n\n  return urlBuilder(objectAssign({projectId, dataset}, options.imageOptions || {}))\n    .image(node)\n    .toString()\n}\n\nmodule.exports = buildUrl\n","const getSerializers = require('./serializers')\nconst blocksToNodes = require('./blocksToNodes')\nconst getImageUrl = require('./getImageUrl')\nconst mergeSerializers = require('./mergeSerializers')\n\nmodule.exports = {\n  blocksToNodes: (renderNode, props, defaultSerializers, serializeSpan) => {\n    if (defaultSerializers) {\n      return blocksToNodes(renderNode, props, defaultSerializers, serializeSpan)\n    }\n\n    // Backwards-compatibility\n    const serializers = getSerializers(renderNode)\n    return blocksToNodes(\n      renderNode,\n      props,\n      serializers.defaultSerializers,\n      serializers.serializeSpan\n    )\n  },\n  getSerializers,\n  getImageUrl,\n  mergeSerializers\n}\n","const objectAssign = require('object-assign')\nconst isDefined = val => typeof val !== 'undefined'\n\n// Recursively merge/replace default serializers with user-specified serializers\nmodule.exports = function mergeSerializers(defaultSerializers, userSerializers) {\n  return Object.keys(defaultSerializers).reduce((acc, key) => {\n    const type = typeof defaultSerializers[key]\n    if (type === 'function') {\n      acc[key] = isDefined(userSerializers[key]) ? userSerializers[key] : defaultSerializers[key]\n    } else if (type === 'object') {\n      acc[key] = objectAssign({}, defaultSerializers[key], userSerializers[key])\n    } else {\n      acc[key] =\n        typeof userSerializers[key] === 'undefined' ? defaultSerializers[key] : userSerializers[key]\n    }\n    return acc\n  }, {})\n}\n","const objectAssign = require('object-assign')\n\n/* eslint-disable max-depth, complexity */\nfunction nestLists(blocks, mode = 'html') {\n  const tree = []\n  let currentList\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i]\n    if (!isListBlock(block)) {\n      tree.push(block)\n      currentList = null\n      continue\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block)\n      tree.push(currentList)\n      continue\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block)\n      continue\n    }\n\n    // Different list props, are we going deeper?\n    if (block.level > currentList.level) {\n      const newList = listFromBlock(block)\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // We actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        const lastListItem = lastChild(currentList)\n        const newLastChild = objectAssign({}, lastListItem, {\n          children: lastListItem.children.concat(newList)\n        })\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild\n      } else {\n        currentList.children.push(newList)\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList\n      continue\n    }\n\n    // Different list props, are we going back up the tree?\n    if (block.level < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      const match = findListMatching(tree[tree.length - 1], block)\n      if (match) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block)\n      tree.push(currentList)\n      continue\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      const match = findListMatching(tree[tree.length - 1], {level: block.level})\n      if (match && match.listItem === block.listItem) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      } else {\n        currentList = listFromBlock(block)\n        tree.push(currentList)\n        continue\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block)\n    tree.push(block)\n  }\n\n  return tree\n}\n\nfunction isListBlock(block) {\n  return Boolean(block.listItem)\n}\n\nfunction blockMatchesList(block, list) {\n  return block.level === list.level && block.listItem === list.listItem\n}\n\nfunction listFromBlock(block) {\n  return {\n    _type: 'list',\n    _key: `${block._key}-parent`,\n    level: block.level,\n    listItem: block.listItem,\n    children: [block]\n  }\n}\n\nfunction lastChild(block) {\n  return block.children && block.children[block.children.length - 1]\n}\n\nfunction findListMatching(rootNode, matching) {\n  const filterOnType = typeof matching.listItem === 'string'\n  if (\n    rootNode._type === 'list' &&\n    rootNode.level === matching.level &&\n    (filterOnType && rootNode.listItem === matching.listItem)\n  ) {\n    return rootNode\n  }\n\n  const node = lastChild(rootNode)\n  if (!node) {\n    return false\n  }\n\n  return findListMatching(node, matching)\n}\n\nmodule.exports = nestLists\n","const objectAssign = require('object-assign')\nconst getImageUrl = require('./getImageUrl')\n\nmodule.exports = (h, serializerOpts) => {\n  const serializeOptions = serializerOpts || {useDashedStyles: false}\n\n  // Low-level block serializer\n  function BlockSerializer(props) {\n    const {node, serializers, options, isInline, children} = props\n    const blockType = node._type\n    const serializer = serializers.types[blockType]\n    if (!serializer) {\n      if (options.ignoreUnknownTypes) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n        )\n        return h(serializers.unknownType, {node, options, isInline}, children)\n      }\n      throw new Error(\n        `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n      )\n    }\n\n    return h(serializer, {node, options, isInline}, children)\n  }\n\n  // Low-level span serializer\n  function SpanSerializer(props) {\n    const {mark, children} = props.node\n    const isPlain = typeof mark === 'string'\n    const markType = isPlain ? mark : mark._type\n    const serializer = props.serializers.marks[markType]\n    if (!serializer) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Unknown mark type \"${markType}\", please specify a serializer for it in the \\`serializers.marks\\` prop`\n      )\n      return h(props.serializers.unknownMark, null, children)\n    }\n\n    return h(serializer, props.node, children)\n  }\n\n  // Low-level list serializer\n  function ListSerializer(props) {\n    const tag = props.type === 'bullet' ? 'ul' : 'ol'\n    return h(tag, null, props.children)\n  }\n\n  // Low-level list item serializer\n  function ListItemSerializer(props) {\n    const children =\n      !props.node.style || props.node.style === 'normal'\n        ? // Don't wrap plain text in paragraphs inside of a list item\n          props.children\n        : // But wrap any other style in whatever the block serializer says to use\n          h(props.serializers.types.block, props, props.children)\n\n    return h('li', null, children)\n  }\n\n  // Unknown type default serializer\n  function DefaultUnknownTypeSerializer(props) {\n    return h(\n      'div',\n      {style: {display: 'none'}},\n      `Unknown block type \"${\n        props.node._type\n      }\", please specify a serializer for it in the \\`serializers.types\\` prop`\n    )\n  }\n\n  // Renderer of an actual block of type `block`. Confusing, we know.\n  function BlockTypeSerializer(props) {\n    const style = props.node.style || 'normal'\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children)\n    }\n\n    return style === 'blockquote'\n      ? h('blockquote', null, props.children)\n      : h('p', null, props.children)\n  }\n\n  // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children)\n  }\n\n  function UnderlineSerializer(props) {\n    const style = serializeOptions.useDashedStyles\n      ? {'text-decoration': 'underline'}\n      : {textDecoration: 'underline'}\n\n    return h('span', {style}, props.children)\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children)\n  }\n\n  function LinkSerializer(props) {\n    return h('a', {href: props.mark.href}, props.children)\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null\n    }\n\n    const img = h('img', {src: getImageUrl(props)})\n    return props.isInline ? img : h('figure', null, img)\n  }\n\n  // Serializer that recursively calls itself, producing a hyperscript tree of spans\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {key: `hb-${index}`})\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, {key: `text-${index}`}, span) : span\n    }\n\n    let children\n    if (span.children) {\n      children = {\n        children: span.children.map((child, i) =>\n          options.serializeNode(child, i, span.children, true)\n        )\n      }\n    }\n\n    const serializedNode = objectAssign({}, span, children)\n\n    return h(serializers.span, {\n      key: span._key || `span-${index}`,\n      node: serializedNode,\n      serializers\n    })\n  }\n\n  const HardBreakSerializer = () => h('br')\n  const defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  }\n\n  const defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n\n    unknownType: DefaultUnknownTypeSerializer,\n    unknownMark: 'span',\n\n    // Container element\n    container: 'div',\n\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  }\n\n  return {\n    defaultSerializers,\n    serializeSpan\n  }\n}\n","var baseUrl = 'https://docs.sanity.io/help/'\n\nmodule.exports = function generateHelpUrl(slug) {\n  return baseUrl + slug\n}\n","const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions) {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    return null\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = crop.height\n    const width = height * desiredAspectRatio\n    const top = crop.top\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = (hotspot.right - hotspot.left) / 2 + hotspot.left\n    let left = hotspotXCenter - width / 2\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {\n      left: Math.round(left),\n      top: Math.round(top),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = width / desiredAspectRatio\n    const left = crop.left\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = (hotspot.bottom - hotspot.top) / 2 + hotspot.top\n    let top = hotspotYCenter - height / 2\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {\n      left: Math.max(0, Math.floor(left)),\n      top: Math.max(0, Math.floor(top)),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    return this.withOptions({dpr})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n","const React = require('react')\nconst PropTypes = require('prop-types')\nconst internals = require('@sanity/block-content-to-hyperscript/internals')\nconst {serializers, serializeSpan, renderProps} = require('./targets/dom')\n\nconst {getImageUrl, blocksToNodes, mergeSerializers} = internals\nconst renderNode = React.createElement\n\nconst SanityBlockContent = (props) => {\n  const customSerializers = mergeSerializers(\n    SanityBlockContent.defaultSerializers,\n    props.serializers\n  )\n\n  const blockProps = Object.assign({}, renderProps, props, {\n    serializers: customSerializers,\n    blocks: props.blocks || [],\n  })\n\n  return blocksToNodes(renderNode, blockProps, serializers, serializeSpan)\n}\n\n// Expose default serializers to the user\nSanityBlockContent.defaultSerializers = serializers\n\n// Expose logic for building image URLs from an image reference/node\nSanityBlockContent.getImageUrl = getImageUrl\n\nSanityBlockContent.propTypes = {\n  className: PropTypes.string,\n  renderContainerOnSingleChild: PropTypes.bool,\n  ignoreUnknownTypes: PropTypes.bool,\n\n  // When rendering images, we need project id and dataset, unless images are materialized\n  projectId: PropTypes.string,\n  dataset: PropTypes.string,\n  imageOptions: PropTypes.object,\n\n  serializers: PropTypes.shape({\n    // Common overrides\n    types: PropTypes.object,\n    marks: PropTypes.object,\n\n    // Less common overrides\n    list: PropTypes.func,\n    listItem: PropTypes.func,\n\n    // Low-level serializers\n    block: PropTypes.func,\n    span: PropTypes.func,\n  }),\n\n  blocks: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        _type: PropTypes.string.isRequired,\n      })\n    ),\n    PropTypes.shape({\n      _type: PropTypes.string.isRequired,\n    }),\n  ]).isRequired,\n}\n\nSanityBlockContent.defaultProps = {\n  ignoreUnknownTypes: true,\n  renderContainerOnSingleChild: false,\n  serializers: {},\n  imageOptions: {},\n}\n\nmodule.exports = SanityBlockContent\n","const React = require('react')\nconst {getSerializers} = require('@sanity/block-content-to-hyperscript/internals')\n\nconst renderNode = React.createElement\nconst {defaultSerializers, serializeSpan} = getSerializers(renderNode)\n\nmodule.exports = {\n  serializeSpan,\n  serializers: defaultSerializers,\n  renderProps: {nestMarks: true},\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["module","exports","objectAssign","require","buildMarksTree","nestLists","generateKeys","mergeSerializers","optionProps","defaults","imageOptions","ignoreUnknownTypes","isListItem","block","h","properties","defaultSerializers","serializeSpan","props","rawBlocks","Array","keyedBlocks","blocks","serializers","options","value","opts","type","list","level","key","children","serializeList","tree","node","index","serializeListItem","i","siblings","findListItemIndex","isSpan","serializeNode","blockProps","isInline","serializeBlock","renderContainerOnSingleChild","Boolean","nodes","containerProps","className","defaultMarks","sortMarksByOccurences","span","spans","markOccurences","occurences","siblingIndex","sibling","sortByOccurence","sortMarks","markA","markB","aOccurences","bOccurences","aDefaultPos","bDefaultPos","markDefs","sortedMarks","rootNode","_type","nodeStack","marksNeeded","pos","mark","currentNode","findLastParentNode","_key","def","markKey","lines","line","lastNode","checksum","str","hash","strlen","item","JSON","generateHelpUrl","urlBuilder","enc","materializeError","projectId","dataset","asset","Error","query","keys","Object","params","getQueryString","getSerializers","blocksToNodes","getImageUrl","renderNode","userSerializers","acc","isDefined","isListBlock","blockMatchesList","listFromBlock","listItem","lastChild","findListMatching","matching","filterOnType","mode","currentList","newList","lastListItem","newLastChild","match","console","serializeOptions","serializerOpts","useDashedStyles","tag","types","style","test","image","img","src","marks","strong","RawMarkSerializer","em","code","underline","textDecoration","link","href","blockType","serializer","markType","hardBreak","unknownType","display","unknownMark","container","text","empty","serializedNode","slug","example","parseAssetId","ref","id","dimensionString","format","width","imgWidthStr","height","imgHeightStr","isFinite","isRef","isAsset","isAssetStub","source","parseSource","isUrl","_ref","urlToId","applyDefaults","url","result","left","top","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","spec","cropLeft","Math","cropTop","crop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","hotspot","fit","specToImageUrl","cdnUrl","filename","baseUrl","flip","specName","mapping","param","encodeURIComponent","imgWidth","imgHeight","rect","desiredAspectRatio","cropRect","validFits","validCrops","validAutoModes","client","entry","isSanityClientLike","apiUrl","ImageUrlBuilder","apiHost","this","parent","withOptions","newOptions","rewriteSpecName","bg","dpr","focalPoint","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","flipHorizontal","flipVertical","ignoreImageParams","saturation","auto","pad","toString","React","PropTypes","internals","renderProps","SanityBlockContent","customSerializers","assign","shape","func","oneOfType","arrayOf","isRequired","nestMarks","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","location","propFullName","secret","err","name","getShim","ReactPropTypes","array","bigint","bool","number","object","string","symbol","any","element","elementType","instanceOf","objectOf","oneOf","exact","checkPropTypes"],"sourceRoot":""}