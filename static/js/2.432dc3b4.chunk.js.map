{"version":3,"file":"static/js/2.432dc3b4.chunk.js","mappings":"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","sources":["Components/Buttons/StoryButton/StoryButton.js","Components/Structural/PageTitle/PageTitle.js","Components/General/Contributor/Contributor.js","Pages/About/About.js","utils/imageUrl/imageUrl.js","../node_modules/@sanity/image-url/src/parseAssetId.ts","../node_modules/@sanity/image-url/src/parseSource.ts","../node_modules/@sanity/image-url/src/urlForImage.ts","../node_modules/@sanity/image-url/src/builder.ts"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./StoryButton.scss\";\n\n/**\n * @function StoryButton\n * @description A link that exists currently on the playground. If a link is\n * passed, the component will route to another page, but if not, the onClick\n * function will be called on click.\n * @param {object} props The JSX props passed to this React component\n * @param {string} props.children The text to render in this button\n * @param {Function} [props.onClick] A function to call when this button is\n * clicked. If props.link is passed, this will not be called.\n * @param {string} [props.link] A link to route to. If this is passed, onClick\n * will not be called.\n * @param {string} [props.className] Additional class names to pass to this\n * component.\n * @author Alexander Burdiss\n * @since 5/13/21\n * @version 1.0.1\n * @component\n * @example\n * ```jsx\n * <StoryButton link=\"/\">Hello, StoryButton!</StoryButton>\n * ```\n */\nexport default function StoryButton({ children, onClick, link, className }) {\n  return link ? (\n    <Link\n      to={link}\n      className={\"ButtonContainer\" + (className ? \" \" + className : \"\")}\n    >\n      <div>{children}</div>\n    </Link>\n  ) : (\n    <button\n      // @ts-ignore\n      onClick={onClick}\n      className={\"ButtonContainer\" + (className ? \" \" + className : \"\")}\n    >\n      <div>{children}</div>\n    </button>\n  );\n}\n","import React from \"react\";\nimport \"./PageTitle.scss\";\n\n/**\n * @function PageTitle\n * @description A stylized Page title, that can easily be used across the site\n * on the different pages\n * @param {object} props The JSX props passed to this React component\n * @param {string} props.children The text to render in this title\n * @author Alexander Burdiss\n * @since 5/28/21\n * @version 1.0.0\n * @component\n * @example\n * <PageTitle>Hello, Title!</PageTitle>\n */\nexport default function PageTitle({ children }) {\n  return (\n    <div className=\"PageTitle-Container\">\n      <h1 className=\"PageTitle\">{children}</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport BlockContent from \"@sanity/block-content-to-react\";\n\nimport \"./Contributor.scss\";\n\nimport sanityClient from \"../../../client\";\n\n/**\n * @function Contributor\n * @description A formatted display for a contributor for the site.\n * @author Alexander Burdiss\n * @since 6/6/21\n * @version 2.0.0\n * @param {object} props The JSX props passed to this React component.\n * @param {string} props.name The name of the contributor.\n * @param {object} props.bio The biography of the contributor.\n * @param {string} props.image The path to the image of the contributor to\n * render\n * @param {string} props.alt Alt text for the image.\n */\nexport default function Contributor({ name, bio, image, alt }) {\n  return (\n    <div className=\"Contributor-Container\">\n      <img src={image} alt={alt} />\n      <div className=\"Contributor-Name\">{name}</div>\n      <BlockContent\n        blocks={bio}\n        projectId={sanityClient.config().projectId}\n        dataset={sanityClient.config().dataset}\n      />\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./About.scss\";\n\nimport sanityClient from \"../../client\";\n\nimport { imageUrl } from \"../../utils/imageUrl/imageUrl\";\n\nimport PageTitle from \"../../Components/Structural/PageTitle/PageTitle\";\nimport Contributor from \"../../Components/General/Contributor/Contributor\";\nimport StandardWrapper from \"../../Components/Structural/StandardWrapper/StandardWrapper\";\nimport StoryButton from \"../../Components/Buttons/StoryButton/StoryButton\";\nimport SEO from \"../../Components/Structural/SEO/SEO\";\n\n/**\n * @function About\n * @description Information about the contributors of the site, and about the\n * site itself.\n * @author Alexander Burdiss\n * @since 6/6/21\n * @lastmodified 2/19/22\n * @version 1.5.0\n * @component\n * @example\n * <About />\n */\nexport default function About() {\n  const [contributors, setContributors] = useState([]);\n  useEffect(() => {\n    sanityClient\n      .fetch(\n        `*[_type == \"contributor\"]{\n          name,\n          slug,\n          image{\n            asset->{\n              _id,\n              url\n            },\n          },\n          alt,\n          bio\n        }`\n      )\n      .then(setContributors)\n      .catch(console.error);\n  }, []);\n\n  return (\n    <StandardWrapper>\n      <SEO title=\"About\" />\n      <div className=\"AboutPage-Container\">\n        <div className=\"Header-Container\">\n          <PageTitle>About</PageTitle>\n          <div className=\"Description-Contianer\">\n            <div>\n              The Bedtime Project aims at helping you get to sleep, or just have\n              a fun evening with stories and games.\n            </div>\n            <div>Here are the people who make this site possible:</div>\n          </div>\n        </div>\n        <div className=\"All-Contributors-Container\">\n          {contributors &&\n            contributors.map((contributor, index) => {\n              return (\n                <Contributor\n                  key={index}\n                  name={contributor.name}\n                  bio={contributor.bio}\n                  image={imageUrl(contributor.image)\n                    .width(400)\n                    .height(400)\n                    .url()}\n                  alt={contributor.alt}\n                />\n              );\n            })}\n        </div>\n        <div className=\"Header-Container\">\n          <div className=\"Description-Contianer\">\n            <div>\n              Contact us if you have any questions at all, want to report a bug,\n              or have any suggestions.\n            </div>\n            <a href=\"mailto:code@bedtimeproject.org\">code@bedtimeproject.org</a>{\" \"}\n            <a href=\"mailto:moonbloom@bedtimeproject.org \">\n              moonbloom@bedtimeproject.org\n            </a>\n          </div>\n        </div>\n        <div className=\"Link-Container\">\n          <StoryButton link=\"/about/acknowledgements\">\n            Acknowledgements\n          </StoryButton>\n          <StoryButton link=\"/about/licenses\">Licenses</StoryButton>\n        </div>\n      </div>\n    </StandardWrapper>\n  );\n}\n","import imageUrlBuilder from \"@sanity/image-url\";\nimport sanityClient from \"../../client\";\nconst builder = imageUrlBuilder(sanityClient);\n\n/**\n * @function imageUrl\n * @description Handles pulling in the sanity client and image url builder to\n * create an object that makes pulling sanity images easier.\n * @param {object} source The source for the image to load from Sanity.\n * @returns {object}\n * @author Alexander Burdiss\n * @since 2/19/22\n * @version 1.0.0\n */\nexport function imageUrl(source) {\n  return builder.image(source);\n}\n","const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n"],"names":["StoryButton","children","onClick","link","className","to","PageTitle","Contributor","name","bio","image","alt","src","blocks","projectId","sanityClient","dataset","About","useState","contributors","setContributors","useEffect","then","catch","console","error","StandardWrapper","SEO","title","map","contributor","index","imageUrl","width","height","url","href","builder","imageUrlBuilder","source","const","example","parseAssetId","ref","id","dimensionString","format","Error","imgWidthStr","imgHeightStr","isFinite","isRef","isAsset","isAssetStub","parseSource","isUrl","asset","_ref","urlToId","img","applyDefaults","test","result","left","top","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","options","spec","JSON","cropLeft","Math","cropTop","crop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","hotspot","fit","specToImageUrl","cdnUrl","filename","baseUrl","params","rect","bg","flip","mapping","specName","param","encodeURIComponent","imgWidth","imgHeight","desiredAspectRatio","hotspotXCenter","cropRect","hotspotYCenter","validFits","validCrops","validAutoModes","client","specs","entry","key","urlBuilder","isSanityClientLike","clientConfig","apiUrl","ImageUrlBuilder","apiHost","constructor","parent","this","withOptions","newOptions","rewriteSpecName","dpr","focalPoint","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","flipHorizontal","flipVertical","ignoreImageParams","value","saturation","auto","pad","toString"],"sourceRoot":""}