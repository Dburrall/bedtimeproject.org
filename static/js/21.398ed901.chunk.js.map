{"version":3,"sources":["../node_modules/chess.js/chess.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js"],"names":["Chess","fen","BLACK","WHITE","EMPTY","PAWN","BISHOP","KING","DEFAULT_POSITION","POSSIBLE_RESULTS","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","SHIFTS","p","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","ROOKS","square","flag","board","Array","kings","turn","castling","ep_square","half_moves","move_number","history","header","comments","clear","keep_headers","update_setup","generate_fen","prune_comments","reversed_history","current_comments","copy_comment","length","push","undo_move","make_move","pop","reset","load","tokens","split","position","validate_fen","valid","i","piece","charAt","indexOf","parseInt","color","put","type","toLowerCase","algebraic","errors","error_number","error","isNaN","test","rows","sum_fields","previous_was_number","empty","toUpperCase","cflags","epflags","join","set_header","args","get","sq","build_move","from","to","flags","promotion","move","captured","generate_moves","options","add_move","moves","rank","pieces","len","us","them","swap_color","second_rank","first_sq","last_sq","single_square","legal","piece_type","j","offset","castling_to","castling_from","attacked","legal_moves","king_attacked","move_to_san","output","disambiguator","ambiguities","same_rank","same_file","ambig_from","ambig_to","file","get_disambiguator","in_check","in_checkmate","stripped_san","replace","difference","index","blocked","in_stalemate","insufficient_material","bishops","num_pieces","sq_color","sum","in_threefold_repetition","positions","repetition","slice","old","move_from_san","sloppy","clean_move","matches","match","san","infer_piece_type","legalMoves","illegalMoves","f","substring","c","make_pretty","ugly_move","clone","obj","dupe","property","trim","str","perft","depth","nodes","KNIGHT","ROOK","QUEEN","keys","ugly_moves","verbose","in_draw","game_over","row","pgn","newline","newline_char","max_width","result","header_exists","append_comment","move_string","comment","delimiter","Result","strip","wrap_comment","width","token","current_width","includes","load_pgn","mask","header_regex","RegExp","header_string","exec","headers","header_obj","key","value","parse_pgn_header","encode_comment","string","map","charCodeAt","toString","encodeURIComponent","to_hex","decode_comment","startsWith","endsWith","decodeURIComponent","from_hex","ms","bracket","semicolon","undefined","rav_regex","half_move","object","has_keys","arguments","ascii","s","move_obj","pretty_move","undo","remove","square_color","sq_0x88","move_history","get_comment","set_comment","delete_comment","get_comments","Object","delete_comments","exports","define","unsupportedIterableToArray","module","o","allowArrayLike","it","Symbol","iterator","isArray","F","done","e","_e","TypeError","err","normalCompletion","didErr","step","next","_e2","arrayLikeToArray","minLen","prototype","call","constructor","name","arr","arr2"],"mappings":"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","file":"static/js/21.398ed901.chunk.js","sourcesContent":["/*\n * Copyright (c) 2021, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\nvar Chess = function (fen) {\n  var BLACK = 'b'\n  var WHITE = 'w'\n\n  var EMPTY = -1\n\n  var PAWN = 'p'\n  var KNIGHT = 'n'\n  var BISHOP = 'b'\n  var ROOK = 'r'\n  var QUEEN = 'q'\n  var KING = 'k'\n\n  var SYMBOLS = 'pnbrqkPNBRQK'\n\n  var DEFAULT_POSITION =\n    'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\n  var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*']\n\n  var PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15],\n  }\n\n  var PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1],\n  }\n\n  // prettier-ignore\n  var ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n  ];\n\n  // prettier-ignore\n  var RAYS = [\n     17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n      0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n      0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n      0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n      0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n      1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n      0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n      0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n      0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n      0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n    -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n  ];\n\n  var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 }\n\n  var FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q',\n  }\n\n  var BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64,\n  }\n\n  var RANK_1 = 7\n  var RANK_2 = 6\n  var RANK_3 = 5\n  var RANK_4 = 4\n  var RANK_5 = 3\n  var RANK_6 = 2\n  var RANK_7 = 1\n  var RANK_8 = 0\n\n  // prettier-ignore\n  var SQUARES = {\n    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\n\n  var ROOKS = {\n    w: [\n      { square: SQUARES.a1, flag: BITS.QSIDE_CASTLE },\n      { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE },\n    ],\n    b: [\n      { square: SQUARES.a8, flag: BITS.QSIDE_CASTLE },\n      { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE },\n    ],\n  }\n\n  var board = new Array(128)\n  var kings = { w: EMPTY, b: EMPTY }\n  var turn = WHITE\n  var castling = { w: 0, b: 0 }\n  var ep_square = EMPTY\n  var half_moves = 0\n  var move_number = 1\n  var history = []\n  var header = {}\n  var comments = {}\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    load(DEFAULT_POSITION)\n  } else {\n    load(fen)\n  }\n\n  function clear(keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    board = new Array(128)\n    kings = { w: EMPTY, b: EMPTY }\n    turn = WHITE\n    castling = { w: 0, b: 0 }\n    ep_square = EMPTY\n    half_moves = 0\n    move_number = 1\n    history = []\n    if (!keep_headers) header = {}\n    comments = {}\n    update_setup(generate_fen())\n  }\n\n  function prune_comments() {\n    var reversed_history = []\n    var current_comments = {}\n    var copy_comment = function (fen) {\n      if (fen in comments) {\n        current_comments[fen] = comments[fen]\n      }\n    }\n    while (history.length > 0) {\n      reversed_history.push(undo_move())\n    }\n    copy_comment(generate_fen())\n    while (reversed_history.length > 0) {\n      make_move(reversed_history.pop())\n      copy_comment(generate_fen())\n    }\n    comments = current_comments\n  }\n\n  function reset() {\n    load(DEFAULT_POSITION)\n  }\n\n  function load(fen, keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    var tokens = fen.split(/\\s+/)\n    var position = tokens[0]\n    var square = 0\n\n    if (!validate_fen(fen).valid) {\n      return false\n    }\n\n    clear(keep_headers)\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        var color = piece < 'a' ? WHITE : BLACK\n        put({ type: piece.toLowerCase(), color: color }, algebraic(square))\n        square++\n      }\n    }\n\n    turn = tokens[1]\n\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]]\n    half_moves = parseInt(tokens[4], 10)\n    move_number = parseInt(tokens[5], 10)\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function validate_fen(fen) {\n    var errors = {\n      0: 'No errors.',\n      1: 'FEN string must contain six space-delimited fields.',\n      2: '6th field (move number) must be a positive integer.',\n      3: '5th field (half move counter) must be a non-negative integer.',\n      4: '4th field (en-passant square) is invalid.',\n      5: '3rd field (castling availability) is invalid.',\n      6: '2nd field (side to move) is invalid.',\n      7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\n      8: '1st field (piece positions) is invalid [consecutive numbers].',\n      9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square',\n    }\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/)\n    if (tokens.length !== 6) {\n      return { valid: false, error_number: 1, error: errors[1] }\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\n      return { valid: false, error_number: 2, error: errors[2] }\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\n      return { valid: false, error_number: 3, error: errors[3] }\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return { valid: false, error_number: 4, error: errors[4] }\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return { valid: false, error_number: 5, error: errors[5] }\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return { valid: false, error_number: 6, error: errors[6] }\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/')\n    if (rows.length !== 8) {\n      return { valid: false, error_number: 7, error: errors[7] }\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0\n      var previous_was_number = false\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return { valid: false, error_number: 8, error: errors[8] }\n          }\n          sum_fields += parseInt(rows[i][k], 10)\n          previous_was_number = true\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return { valid: false, error_number: 9, error: errors[9] }\n          }\n          sum_fields += 1\n          previous_was_number = false\n        }\n      }\n      if (sum_fields !== 8) {\n        return { valid: false, error_number: 10, error: errors[10] }\n      }\n    }\n\n    if (\n      (tokens[3][1] == '3' && tokens[1] == 'w') ||\n      (tokens[3][1] == '6' && tokens[1] == 'b')\n    ) {\n      return { valid: false, error_number: 11, error: errors[11] }\n    }\n\n    /* everything's okay! */\n    return { valid: true, error_number: 0, error: errors[0] }\n  }\n\n  function generate_fen() {\n    var empty = 0\n    var fen = ''\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      if (board[i] == null) {\n        empty++\n      } else {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        var color = board[i].color\n        var piece = board[i].type\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== SQUARES.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    var cflags = ''\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n      cflags += 'K'\n    }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n      cflags += 'Q'\n    }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n      cflags += 'k'\n    }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n      cflags += 'q'\n    }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-'\n    var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square)\n\n    return [fen, turn, cflags, epflags, half_moves, move_number].join(' ')\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1]\n      }\n    }\n    return header\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1'\n      header['FEN'] = fen\n    } else {\n      delete header['SetUp']\n      delete header['FEN']\n    }\n  }\n\n  function get(square) {\n    var piece = board[SQUARES[square]]\n    return piece ? { type: piece.type, color: piece.color } : null\n  }\n\n  function put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARES)) {\n      return false\n    }\n\n    var sq = SQUARES[square]\n\n    /* don't let the user place more than one king */\n    if (\n      piece.type == KING &&\n      !(kings[piece.color] == EMPTY || kings[piece.color] == sq)\n    ) {\n      return false\n    }\n\n    board[sq] = { type: piece.type, color: piece.color }\n    if (piece.type === KING) {\n      kings[piece.color] = sq\n    }\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  function remove(square) {\n    var piece = get(square)\n    board[SQUARES[square]] = null\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY\n    }\n\n    update_setup(generate_fen())\n\n    return piece\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type,\n    }\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION\n      move.promotion = promotion\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type\n    } else if (flags & BITS.EP_CAPTURE) {\n      move.captured = PAWN\n    }\n    return move\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (\n        board[from].type === PAWN &&\n        (rank(to) === RANK_8 || rank(to) === RANK_1)\n      ) {\n        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT]\n        for (var i = 0, len = pieces.length; i < len; i++) {\n          moves.push(build_move(board, from, to, flags, pieces[i]))\n        }\n      } else {\n        moves.push(build_move(board, from, to, flags))\n      }\n    }\n\n    var moves = []\n    var us = turn\n    var them = swap_color(us)\n    var second_rank = { b: RANK_7, w: RANK_2 }\n\n    var first_sq = SQUARES.a8\n    var last_sq = SQUARES.h1\n    var single_square = false\n\n    /* do we want legal moves? */\n    var legal =\n      typeof options !== 'undefined' && 'legal' in options\n        ? options.legal\n        : true\n\n    var piece_type =\n      typeof options !== 'undefined' &&\n      'piece' in options &&\n      typeof options.piece === 'string'\n        ? options.piece.toLowerCase()\n        : true\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARES) {\n        first_sq = last_sq = SQUARES[options.square]\n        single_square = true\n      } else {\n        /* invalid square */\n        return []\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece == null || piece.color !== us) {\n        continue\n      }\n\n      if (piece.type === PAWN && (piece_type === true || piece_type === PAWN)) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0]\n        if (board[square] == null) {\n          add_move(board, moves, i, square, BITS.NORMAL)\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1]\n          if (second_rank[us] === rank(i) && board[square] == null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN)\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j]\n          if (square & 0x88) continue\n\n          if (board[square] != null && board[square].color === them) {\n            add_move(board, moves, i, square, BITS.CAPTURE)\n          } else if (square === ep_square) {\n            add_move(board, moves, i, ep_square, BITS.EP_CAPTURE)\n          }\n        }\n      } else if (piece_type === true || piece_type === piece.type) {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j]\n          var square = i\n\n          while (true) {\n            square += offset\n            if (square & 0x88) break\n\n            if (board[square] == null) {\n              add_move(board, moves, i, square, BITS.NORMAL)\n            } else {\n              if (board[square].color === us) break\n              add_move(board, moves, i, square, BITS.CAPTURE)\n              break\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if (piece_type === true || piece_type === KING) {\n      if (!single_square || last_sq === kings[us]) {\n        /* king-side castling */\n        if (castling[us] & BITS.KSIDE_CASTLE) {\n          var castling_from = kings[us]\n          var castling_to = castling_from + 2\n\n          if (\n            board[castling_from + 1] == null &&\n            board[castling_to] == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from + 1) &&\n            !attacked(them, castling_to)\n          ) {\n            add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE)\n          }\n        }\n\n        /* queen-side castling */\n        if (castling[us] & BITS.QSIDE_CASTLE) {\n          var castling_from = kings[us]\n          var castling_to = castling_from - 2\n\n          if (\n            board[castling_from - 1] == null &&\n            board[castling_from - 2] == null &&\n            board[castling_from - 3] == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from - 1) &&\n            !attacked(them, castling_to)\n          ) {\n            add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE)\n          }\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = []\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i])\n      }\n      undo_move()\n    }\n\n    return legal_moves\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, moves) {\n    var output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      if (move.piece !== PAWN) {\n        var disambiguator = get_disambiguator(move, moves)\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    make_move(move)\n    if (in_check()) {\n      if (in_checkmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    undo_move()\n\n    return output\n  }\n  // parses all of the decorators out of a SAN string\n  function stripped_san(move) {\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      /* if empty square or wrong color */\n      if (board[i] == null || board[i].color !== color) continue\n\n      var piece = board[i]\n      var difference = i - square\n      var index = difference + 119\n\n      if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true\n          } else {\n            if (piece.color === BLACK) return true\n          }\n          continue\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true\n\n        var offset = RAYS[index]\n        var j = i + offset\n\n        var blocked = false\n        while (j !== square) {\n          if (board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) return true\n      }\n    }\n\n    return false\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color])\n  }\n\n  function in_check() {\n    return king_attacked(turn)\n  }\n\n  function in_checkmate() {\n    return in_check() && generate_moves().length === 0\n  }\n\n  function in_stalemate() {\n    return !in_check() && generate_moves().length === 0\n  }\n\n  function insufficient_material() {\n    var pieces = {}\n    var bishops = []\n    var num_pieces = 0\n    var sq_color = 0\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      sq_color = (sq_color + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color)\n        }\n        num_pieces++\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) {\n      return true\n    } else if (\n      /* k vs. kn .... or .... k vs. kb */\n      num_pieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (num_pieces === pieces[BISHOP] + 2) {\n      /* kb vs. kb where any number of bishops are all on the same color */\n      var sum = 0\n      var len = bishops.length\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  function in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = []\n    var positions = {}\n    var repetition = false\n\n    while (true) {\n      var move = undo_move()\n      if (!move) break\n      moves.push(move)\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen().split(' ').slice(0, 4).join(' ')\n\n      /* has the position occurred three or move times */\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1\n      if (positions[fen] >= 3) {\n        repetition = true\n      }\n\n      if (!moves.length) {\n        break\n      }\n      make_move(moves.pop())\n    }\n\n    return repetition\n  }\n\n  function push(move) {\n    history.push({\n      move: move,\n      kings: { b: kings.b, w: kings.w },\n      turn: turn,\n      castling: { b: castling.b, w: castling.w },\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number,\n    })\n  }\n\n  function make_move(move) {\n    var us = turn\n    var them = swap_color(us)\n    push(move)\n\n    board[move.to] = board[move.from]\n    board[move.from] = null\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (turn === BLACK) {\n        board[move.to - 16] = null\n      } else {\n        board[move.to + 16] = null\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = { type: move.promotion, color: us }\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1\n        var castling_from = move.to + 1\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1\n        var castling_from = move.to - 2\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      }\n\n      /* turn off castling */\n      castling[us] = ''\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          castling[us] & ROOKS[us][i].flag\n        ) {\n          castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          castling[them] & ROOKS[them][i].flag\n        ) {\n          castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (turn === 'b') {\n        ep_square = move.to - 16\n      } else {\n        ep_square = move.to + 16\n      }\n    } else {\n      ep_square = EMPTY\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0\n    } else {\n      half_moves++\n    }\n\n    if (turn === BLACK) {\n      move_number++\n    }\n    turn = swap_color(turn)\n  }\n\n  function undo_move() {\n    var old = history.pop()\n    if (old == null) {\n      return null\n    }\n\n    var move = old.move\n    kings = old.kings\n    turn = old.turn\n    castling = old.castling\n    ep_square = old.ep_square\n    half_moves = old.half_moves\n    move_number = old.move_number\n\n    var us = turn\n    var them = swap_color(turn)\n\n    board[move.from] = board[move.to]\n    board[move.from].type = move.piece // to undo any promotions\n    board[move.to] = null\n\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = { type: move.captured, color: them }\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index\n      if (us === BLACK) {\n        index = move.to - 16\n      } else {\n        index = move.to + 16\n      }\n      board[index] = { type: PAWN, color: them }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1\n        castling_from = move.to - 1\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2\n        castling_from = move.to + 1\n      }\n\n      board[castling_to] = board[castling_from]\n      board[castling_from] = null\n    }\n\n    return move\n  }\n\n  /* this function is used to uniquely identify ambiguous moves */\n  function get_disambiguator(move, moves) {\n    var from = move.from\n    var to = move.to\n    var piece = move.piece\n\n    var ambiguities = 0\n    var same_rank = 0\n    var same_file = 0\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      var ambig_from = moves[i].from\n      var ambig_to = moves[i].to\n      var ambig_piece = moves[i].piece\n\n      /* if a move of the same piece type ends on the same to square, we'll\n       * need to add a disambiguator to the algebraic notation\n       */\n      if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n        ambiguities++\n\n        if (rank(from) === rank(ambig_from)) {\n          same_rank++\n        }\n\n        if (file(from) === file(ambig_from)) {\n          same_file++\n        }\n      }\n    }\n\n    if (ambiguities > 0) {\n      /* if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      if (same_rank > 0 && same_file > 0) {\n        return algebraic(from)\n      } else if (same_file > 0) {\n        /* if the moving piece rests on the same file, use the rank symbol as the\n         * disambiguator\n         */\n        return algebraic(from).charAt(1)\n      } else {\n        /* else use the file symbol */\n        return algebraic(from).charAt(0)\n      }\n    }\n\n    return ''\n  }\n\n  function infer_piece_type(san) {\n    var piece_type = san.charAt(0)\n    if (piece_type >= 'a' && piece_type <= 'h') {\n      var matches = san.match(/[a-h]\\d.*[a-h]\\d/)\n      if (matches) {\n        return undefined\n      }\n      return PAWN\n    }\n    piece_type = piece_type.toLowerCase()\n    if (piece_type === 'o') {\n      return KING\n    }\n    return piece_type\n  }\n  function ascii() {\n    var s = '   +------------------------+\\n'\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* display the rank */\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |'\n      }\n\n      /* empty piece */\n      if (board[i] == null) {\n        s += ' . '\n      } else {\n        var piece = board[i].type\n        var color = board[i].color\n        var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n        s += ' ' + symbol + ' '\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n'\n        i += 8\n      }\n    }\n    s += '   +------------------------+\\n'\n    s += '     a  b  c  d  e  f  g  h\\n'\n\n    return s\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?!\n    var clean_move = stripped_san(move)\n\n    // if we're using the sloppy parser run a regex to grab piece, to, and from\n    // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n    if (sloppy) {\n      var matches = clean_move.match(\n        /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n      )\n      if (matches) {\n        var piece = matches[1]\n        var from = matches[2]\n        var to = matches[3]\n        var promotion = matches[4]\n      }\n    }\n    var piece_type = infer_piece_type(clean_move)\n    var moves = null\n    var legalMoves = generate_moves({\n      legal: true,\n      piece: piece ? piece : piece_type,\n    })\n    moves = legalMoves\n    if (sloppy) {\n      var illegalMoves = generate_moves({\n        legal: false,\n        piece: piece ? piece : piece_type,\n      })\n      moves = illegalMoves\n    }\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      // try the strict parser first, then the sloppy parser if requested\n      // by the user\n      if (\n        clean_move === stripped_san(move_to_san(moves[i], legalMoves)) ||\n        (sloppy &&\n          clean_move === stripped_san(move_to_san(moves[i], illegalMoves)))\n      ) {\n        return moves[i]\n      } else {\n        if (\n          matches &&\n          (!piece || piece.toLowerCase() == moves[i].piece) &&\n          SQUARES[from] == moves[i].from &&\n          SQUARES[to] == moves[i].to &&\n          (!promotion || promotion.toLowerCase() == moves[i].promotion)\n        ) {\n          return moves[i]\n        }\n      }\n    }\n\n    return null\n  }\n\n  /*****************************************************************************\n   * UTILITY FUNCTIONS\n   ****************************************************************************/\n  function rank(i) {\n    return i >> 4\n  }\n\n  function file(i) {\n    return i & 15\n  }\n\n  function algebraic(i) {\n    var f = file(i),\n      r = rank(i)\n    return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\n  }\n\n  function swap_color(c) {\n    return c === WHITE ? BLACK : WHITE\n  }\n\n  function is_digit(c) {\n    return '0123456789'.indexOf(c) !== -1\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move)\n    move.san = move_to_san(move, generate_moves({ legal: true }))\n    move.to = algebraic(move.to)\n    move.from = algebraic(move.from)\n\n    var flags = ''\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag]\n      }\n    }\n    move.flags = flags\n\n    return move\n  }\n\n  function clone(obj) {\n    var dupe = obj instanceof Array ? [] : {}\n\n    for (var property in obj) {\n      if (typeof property === 'object') {\n        dupe[property] = clone(obj[property])\n      } else {\n        dupe[property] = obj[property]\n      }\n    }\n\n    return dupe\n  }\n\n  function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '')\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function perft(depth) {\n    var moves = generate_moves({ legal: false })\n    var nodes = 0\n    var color = turn\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = perft(depth - 1)\n          nodes += child_nodes\n        } else {\n          nodes++\n        }\n      }\n      undo_move()\n    }\n\n    return nodes\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC CONSTANTS (is there a better way to do this?)\n     **************************************************************************/\n    WHITE: WHITE,\n    BLACK: BLACK,\n    PAWN: PAWN,\n    KNIGHT: KNIGHT,\n    BISHOP: BISHOP,\n    ROOK: ROOK,\n    QUEEN: QUEEN,\n    KING: KING,\n    SQUARES: (function () {\n      /* from the ECMA-262 spec (section 12.6.4):\n       * \"The mechanics of enumerating the properties ... is\n       * implementation dependent\"\n       * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n       * ordered correctly\n       */\n      var keys = []\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (i & 0x88) {\n          i += 7\n          continue\n        }\n        keys.push(algebraic(i))\n      }\n      return keys\n    })(),\n    FLAGS: FLAGS,\n\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function (fen) {\n      return load(fen)\n    },\n\n    reset: function () {\n      return reset()\n    },\n\n    moves: function (options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options)\n      var moves = []\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (\n          typeof options !== 'undefined' &&\n          'verbose' in options &&\n          options.verbose\n        ) {\n          moves.push(make_pretty(ugly_moves[i]))\n        } else {\n          moves.push(\n            move_to_san(ugly_moves[i], generate_moves({ legal: true }))\n          )\n        }\n      }\n\n      return moves\n    },\n\n    in_check: function () {\n      return in_check()\n    },\n\n    in_checkmate: function () {\n      return in_checkmate()\n    },\n\n    in_stalemate: function () {\n      return in_stalemate()\n    },\n\n    in_draw: function () {\n      return (\n        half_moves >= 100 ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    insufficient_material: function () {\n      return insufficient_material()\n    },\n\n    in_threefold_repetition: function () {\n      return in_threefold_repetition()\n    },\n\n    game_over: function () {\n      return (\n        half_moves >= 100 ||\n        in_checkmate() ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    validate_fen: function (fen) {\n      return validate_fen(fen)\n    },\n\n    fen: function () {\n      return generate_fen()\n    },\n\n    board: function () {\n      var output = [],\n        row = []\n\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (board[i] == null) {\n          row.push(null)\n        } else {\n          row.push({ type: board[i].type, color: board[i].color })\n        }\n        if ((i + 1) & 0x88) {\n          output.push(row)\n          row = []\n          i += 8\n        }\n      }\n\n      return output\n    },\n\n    pgn: function (options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\n'\n      var max_width =\n        typeof options === 'object' && typeof options.max_width === 'number'\n          ? options.max_width\n          : 0\n      var result = []\n      var header_exists = false\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \"' + header[i] + '\"]' + newline)\n        header_exists = true\n      }\n\n      if (header_exists && history.length) {\n        result.push(newline)\n      }\n\n      var append_comment = function (move_string) {\n        var comment = comments[generate_fen()]\n        if (typeof comment !== 'undefined') {\n          var delimiter = move_string.length > 0 ? ' ' : ''\n          move_string = `${move_string}${delimiter}{${comment}}`\n        }\n        return move_string\n      }\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = []\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      var moves = []\n      var move_string = ''\n\n      /* special case of a commented starting position with no moves */\n      if (reversed_history.length === 0) {\n        moves.push(append_comment(''))\n      }\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        move_string = append_comment(move_string)\n        var move = reversed_history.pop()\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!history.length && move.color === 'b') {\n          move_string = move_number + '. ...'\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string)\n          }\n          move_string = move_number + '.'\n        }\n\n        move_string =\n          move_string +\n          ' ' +\n          move_to_san(move, generate_moves({ legal: false }))\n        make_move(move)\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(append_comment(move_string))\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result)\n      }\n\n      /* history should be back to what it was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ')\n      }\n\n      var strip = function () {\n        if (result.length > 0 && result[result.length - 1] === ' ') {\n          result.pop()\n          return true\n        }\n        return false\n      }\n\n      /* NB: this does not preserve comment whitespace. */\n      var wrap_comment = function (width, move) {\n        for (var token of move.split(' ')) {\n          if (!token) {\n            continue\n          }\n          if (width + token.length > max_width) {\n            while (strip()) {\n              width--\n            }\n            result.push(newline)\n            width = 0\n          }\n          result.push(token)\n          width += token.length\n          result.push(' ')\n          width++\n        }\n        if (strip()) {\n          width--\n        }\n        return width\n      }\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0\n      for (var i = 0; i < moves.length; i++) {\n        if (current_width + moves[i].length > max_width) {\n          if (moves[i].includes('{')) {\n            current_width = wrap_comment(current_width, moves[i])\n            continue\n          }\n        }\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop()\n          }\n\n          result.push(newline)\n          current_width = 0\n        } else if (i !== 0) {\n          result.push(' ')\n          current_width++\n        }\n        result.push(moves[i])\n        current_width += moves[i].length\n      }\n\n      return result.join('')\n    },\n\n    load_pgn: function (pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\')\n      }\n\n      function has_keys(object) {\n        for (var key in object) {\n          return true\n        }\n        return false\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char =\n          typeof options === 'object' &&\n          typeof options.newline_char === 'string'\n            ? options.newline_char\n            : '\\r?\\n'\n        var header_obj = {}\n        var headers = header.split(new RegExp(mask(newline_char)))\n        var key = ''\n        var value = ''\n\n        for (var i = 0; i < headers.length; i++) {\n          key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1')\n          value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\ *\\]$/, '$1')\n          if (trim(key).length > 0) {\n            header_obj[key] = value\n          }\n        }\n\n        return header_obj\n      }\n\n      var newline_char =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\r?\\n'\n\n      // RegExp to split header. Takes advantage of the fact that header and movetext\n      // will always have a blank line between them (ie, two newline_char's).\n      // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\r?\\n){2}/\n      var header_regex = new RegExp(\n        '^(\\\\[((?:' +\n          mask(newline_char) +\n          ')|.)*\\\\])' +\n          '(?:' +\n          mask(newline_char) +\n          '){2}'\n      )\n\n      // If no header given, begin with moves.\n      var header_string = header_regex.test(pgn)\n        ? header_regex.exec(pgn)[1]\n        : ''\n\n      // Put the board in the starting position\n      reset()\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options)\n      for (var key in headers) {\n        set_header([key, headers[key]])\n      }\n\n      /* load the starting position indicated by [Setup '1'] and\n       * [FEN position] */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers && load(headers['FEN'], true))) {\n          // second argument to load: don't clear the headers\n          return false\n        }\n      }\n\n      /* NB: the regexes below that delete move numbers, recursive\n       * annotations, and numeric annotation glyphs may also match\n       * text in comments. To prevent this, we transform comments\n       * by hex-encoding them in place and decoding them again after\n       * the other tokens have been deleted.\n       *\n       * While the spec states that PGN files should be ASCII encoded,\n       * we use {en,de}codeURIComponent here to support arbitrary UTF8\n       * as a convenience for modern users */\n\n      var to_hex = function (string) {\n        return Array.from(string)\n          .map(function (c) {\n            /* encodeURI doesn't transform most ASCII characters,\n             * so we handle these ourselves */\n            return c.charCodeAt(0) < 128\n              ? c.charCodeAt(0).toString(16)\n              : encodeURIComponent(c).replace(/\\%/g, '').toLowerCase()\n          })\n          .join('')\n      }\n\n      var from_hex = function (string) {\n        return string.length == 0\n          ? ''\n          : decodeURIComponent('%' + string.match(/.{1,2}/g).join('%'))\n      }\n\n      var encode_comment = function (string) {\n        string = string.replace(new RegExp(mask(newline_char), 'g'), ' ')\n        return `{${to_hex(string.slice(1, string.length - 1))}}`\n      }\n\n      var decode_comment = function (string) {\n        if (string.startsWith('{') && string.endsWith('}')) {\n          return from_hex(string.slice(1, string.length - 1))\n        }\n      }\n\n      /* delete header to get the moves */\n      var ms = pgn\n        .replace(header_string, '')\n        .replace(\n          /* encode comments so they don't get deleted below */\n          new RegExp(`(\\{[^}]*\\})+?|;([^${mask(newline_char)}]*)`, 'g'),\n          function (match, bracket, semicolon) {\n            return bracket !== undefined\n              ? encode_comment(bracket)\n              : ' ' + encode_comment(`{${semicolon.slice(1)}}`)\n          }\n        )\n        .replace(new RegExp(mask(newline_char), 'g'), ' ')\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '')\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '')\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '')\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/))\n\n      /* delete empty entries */\n      moves = moves.join(',').replace(/,,+/g, ',').split(',')\n      var move = ''\n\n      for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n        var comment = decode_comment(moves[half_move])\n        if (comment !== undefined) {\n          comments[generate_fen()] = comment\n          continue\n        }\n        move = move_from_san(moves[half_move], sloppy)\n\n        /* move not possible! (don't clear the board to examine to show the\n         * latest valid position)\n         */\n        if (move == null) {\n          return false\n        } else {\n          make_move(move)\n        }\n      }\n\n      comment = decode_comment(moves[moves.length - 1])\n      if (comment !== undefined) {\n        comments[generate_fen()] = comment\n        moves.pop()\n      }\n\n      /* examine last move */\n      move = moves[moves.length - 1]\n      if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n        if (has_keys(header) && typeof header.Result === 'undefined') {\n          set_header(['Result', move])\n        }\n      } else {\n        move = move_from_san(move, sloppy)\n        if (move == null) {\n          return false\n        } else {\n          make_move(move)\n        }\n      }\n      return true\n    },\n\n    header: function () {\n      return set_header(arguments)\n    },\n\n    ascii: function () {\n      return ascii()\n    },\n\n    turn: function () {\n      return turn\n    },\n\n    move: function (move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      var move_obj = null\n\n      if (typeof move === 'string') {\n        move_obj = move_from_san(move, sloppy)\n      } else if (typeof move === 'object') {\n        var moves = generate_moves()\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (\n            move.from === algebraic(moves[i].from) &&\n            move.to === algebraic(moves[i].to) &&\n            (!('promotion' in moves[i]) ||\n              move.promotion === moves[i].promotion)\n          ) {\n            move_obj = moves[i]\n            break\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj)\n\n      make_move(move_obj)\n\n      return pretty_move\n    },\n\n    undo: function () {\n      var move = undo_move()\n      return move ? make_pretty(move) : null\n    },\n\n    clear: function () {\n      return clear()\n    },\n\n    put: function (piece, square) {\n      return put(piece, square)\n    },\n\n    get: function (square) {\n      return get(square)\n    },\n\n    remove: function (square) {\n      return remove(square)\n    },\n\n    perft: function (depth) {\n      return perft(depth)\n    },\n\n    square_color: function (square) {\n      if (square in SQUARES) {\n        var sq_0x88 = SQUARES[square]\n        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark'\n      }\n\n      return null\n    },\n\n    history: function (options) {\n      var reversed_history = []\n      var move_history = []\n      var verbose =\n        typeof options !== 'undefined' &&\n        'verbose' in options &&\n        options.verbose\n\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop()\n        if (verbose) {\n          move_history.push(make_pretty(move))\n        } else {\n          move_history.push(move_to_san(move, generate_moves({ legal: true })))\n        }\n        make_move(move)\n      }\n\n      return move_history\n    },\n\n    get_comment: function () {\n      return comments[generate_fen()]\n    },\n\n    set_comment: function (comment) {\n      comments[generate_fen()] = comment.replace('{', '[').replace('}', ']')\n    },\n\n    delete_comment: function () {\n      var comment = comments[generate_fen()]\n      delete comments[generate_fen()]\n      return comment\n    },\n\n    get_comments: function () {\n      prune_comments()\n      return Object.keys(comments).map(function (fen) {\n        return { fen: fen, comment: comments[fen] }\n      })\n    },\n\n    delete_comments: function () {\n      prune_comments()\n      return Object.keys(comments).map(function (fen) {\n        var comment = comments[fen]\n        delete comments[fen]\n        return { fen: fen, comment: comment }\n      })\n    },\n  }\n}\n\n/* export Chess object if using node or any other CommonJS compatible\n * environment */\nif (typeof exports !== 'undefined') exports.Chess = Chess\n/* export Chess object for any RequireJS compatible environment */\nif (typeof define !== 'undefined')\n  define(function () {\n    return Chess\n  })\n","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nmodule.exports = _createForOfIteratorHelper;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;"],"sourceRoot":""}