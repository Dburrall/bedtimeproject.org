{"version":3,"file":"static/js/232.013df604.chunk.js","mappings":"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","sources":["Components/Structural/PageTitle/PageTitle.js","Pages/Read/Quips/QuipsDisplay/QuipsDisplay.js","Pages/Read/Quips/Quips.js","utils/imageUrl/imageUrl.js","../node_modules/@sanity/image-url/src/parseAssetId.ts","../node_modules/@sanity/image-url/src/parseSource.ts","../node_modules/@sanity/image-url/src/urlForImage.ts","../node_modules/@sanity/image-url/src/builder.ts"],"sourcesContent":["// @ts-check\r\nimport React from \"react\";\r\nimport \"./PageTitle.scss\";\r\n\r\n/**\r\n * @function PageTitle\r\n * @description A stylized Page title, that can easily be used across the site\r\n * on the different pages\r\n * @param {object} props The JSX props passed to this React component\r\n * @param {string} props.children The text to render in this title\r\n * @author Alexander Burdiss\r\n * @since 5/28/21\r\n * @version 1.0.0\r\n * @component\r\n * @example\r\n * <PageTitle>Hello, Title!</PageTitle>\r\n */\r\nexport default function PageTitle({ children }) {\r\n  return (\r\n    <div className=\"PageTitle-Container\">\r\n      <h1 className=\"PageTitle\">{children}</h1>\r\n    </div>\r\n  );\r\n}\r\n","// @ts-check\r\nimport React from \"react\";\r\nimport \"./QuipsDisplay.scss\";\r\n\r\nimport BlockContent from \"@sanity/block-content-to-react\";\r\nimport { imageUrl } from \"../../../../utils/imageUrl/imageUrl\";\r\nimport sanityClient from \"../../../../client\";\r\n\r\n/**\r\n * @namespace QuipsDisplay\r\n * @function QuipsDisplay\r\n * @description A wrapper that handles rendering the quips.\r\n * @param {object} props The JSX props passed to this React component\r\n * @param {object} props.quip The quip to display in this view.\r\n * @param {number} props.index\r\n * @param {number} props.openQuip\r\n * @param {function} props.setOpenQuip\r\n * @author Alexander Burdiss\r\n * @since 5/27/21\r\n * @version 3.0.2\r\n * @component\r\n * @example\r\n * <QuipsDisplay quip={quip} />\r\n */\r\nexport default function QuipsDisplay({ quip, index, openQuip, setOpenQuip }) {\r\n  return (\r\n    <>\r\n      <style>{`\r\n        .QuipsDisplay-Container.Quip${index} {\r\n          z-index: ${index + 1};\r\n          animation: sendBackToSpot${index} 1s ease;\r\n        }\r\n\r\n        .QuipsDisplay-Container.Quip${index}.Active {\r\n          animation: bringToFront${index} 1s ease;\r\n          z-index: 1000;\r\n          transform: scale(1.1);\r\n        }\r\n\r\n        @keyframes bringToFront${index} {\r\n          0% {\r\n            transform: translateY(0%) scale(1);\r\n            z-index: ${index + 1};\r\n          }\r\n      \r\n          50% {\r\n            transform: translateY(-110%) rotate(5deg) rotateX(20deg);\r\n            z-index: ${index + 1};\r\n          }\r\n          51% {\r\n            z-index: 1000;\r\n          }\r\n      \r\n          100% {\r\n            transform: translateY(0%) scale(1.1);\r\n            z-index: 1000;\r\n          }\r\n        }\r\n      \r\n        @keyframes sendBackToSpot${index} {\r\n          0% {\r\n            transform: translateY(0%) scale(1.1);\r\n            z-index: 1000;\r\n          }\r\n      \r\n          49% {\r\n            z-index: 1000;\r\n          }\r\n\r\n          50% {\r\n            transform: translateY(-110%) rotate(5deg) rotateX(20deg);\r\n            z-index: ${index + 1};\r\n          }\r\n      \r\n          100% {\r\n            transform: translatey(0%) scale(1);\r\n            z-index: ${index + 1};\r\n          }\r\n        }\r\n      `}</style>\r\n      <div\r\n        className={`QuipsDisplay-Container Quip${index} ${\r\n          openQuip === index ? \"Active\" : \"\"\r\n        }`}\r\n        style={{ top: index * 30 + 80 }}\r\n      >\r\n        <div className=\"QuipsInternalWrapper\">\r\n          <button\r\n            className=\"QuipTitleButton\"\r\n            onClick={() => {\r\n              if (openQuip === index) {\r\n                setOpenQuip(undefined);\r\n              } else {\r\n                setOpenQuip(index);\r\n              }\r\n            }}\r\n          >\r\n            <h2>{quip.title}</h2>\r\n          </button>\r\n          <div className=\"LeftBox\">\r\n            <BlockContent\r\n              blocks={quip.body}\r\n              projectId={sanityClient.config().projectId}\r\n              dataset={sanityClient.config().dataset}\r\n            />\r\n            {quip.author && <div className=\"Author\">- {quip.author}</div>}\r\n          </div>\r\n          {quip.mainImage && (\r\n            <div className=\"RightBox\">\r\n              <img src={imageUrl(quip.mainImage).url()} alt={quip.alt} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","// @ts-check\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Quips.scss\";\r\n\r\nimport QuipsDisplay from \"./QuipsDisplay/QuipsDisplay\";\r\nimport PageTitle from \"../../../Components/Structural/PageTitle/PageTitle\";\r\n\r\nimport StandardWrapper from \"../../../Components/Structural/StandardWrapper/StandardWrapper\";\r\nimport SEO from \"../../../Components/Structural/SEO/SEO\";\r\nimport Loading from \"../../../Components/Structural/Loading/Loading\";\r\n\r\nimport sanityClient from \"../../../client\";\r\n\r\n/**\r\n * @function Quips\r\n * @description The main parent component for all of the screens and components\r\n * that are in the Quips tab.\r\n * @author Alexander Burdiss\r\n * @since 5/27/21\r\n * @version 3.2.2\r\n * @component\r\n * @example\r\n * <Quips />\r\n */\r\nexport default function Quips() {\r\n  const [quips, setQuips] = useState([]);\r\n  const [openQuip, setOpenQuip] = useState(undefined);\r\n  const [error, setError] = useState(false);\r\n\r\n  /**\r\n   * @function Quips~closeModalWhenTabNotClicked\r\n   * @description Closes the open Quip if the user clicks anywhere outside the\r\n   * quip.\r\n   * @param {Event} event\r\n   * @author Alexander Burdiss\r\n   * @since 11/6/21\r\n   * @version 1.0.0\r\n   */\r\n  function closeModalWhenTabNotClicked(event) {\r\n    const modalButtons = Array.from(\r\n      document.querySelectorAll(\".QuipTitleButton\")\r\n    );\r\n    const modalTitles = Array.from(\r\n      document.querySelectorAll(\".QuipTitleButton h2\")\r\n    );\r\n    // @ts-ignore\r\n    const buttonClicked = modalButtons.includes(event.target);\r\n    // @ts-ignore\r\n    const titleClicked = modalTitles.includes(event.target);\r\n    if (!buttonClicked && !titleClicked) {\r\n      setOpenQuip(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @async\r\n   * @function Quips~fetchQuips\r\n   * @description Fetches All of the quips from the Sanity backend and adds\r\n   * them to the state variable in this component.\r\n   * @author Alexander Burdiss\r\n   * @since 5/27/21\r\n   * @version 2.0.1\r\n   */\r\n  function fetchQuips() {\r\n    sanityClient\r\n      .fetch(\r\n        `*[_type == \"quip\" && dateTime(publishedAt) < dateTime(now())][0...16] | order(publishedAt) {\r\n        title,\r\n        author,\r\n        mainImage,\r\n        alt,\r\n        mainImageAuthor,\r\n        body,\r\n        publishedAt,\r\n      }`\r\n      )\r\n      .then(setQuips)\r\n      .catch(() => setError(true));\r\n  }\r\n\r\n  useEffect(\r\n    /**\r\n     * @function Quips~useEffect~setupComponent\r\n     * @description Calls all logic required on component setup.\r\n     * @version 1.0.1\r\n     */\r\n    function setupComponent() {\r\n      fetchQuips();\r\n      window.addEventListener(\"click\", closeModalWhenTabNotClicked);\r\n      return () => {\r\n        window.removeEventListener(\"click\", closeModalWhenTabNotClicked);\r\n      };\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <StandardWrapper>\r\n      <SEO title=\"Quips\" />\r\n      <div className=\"QuipsContainer\">\r\n        <div className=\"Limerick-Display-Container\">\r\n          <div className=\"Drawer\">\r\n            {error ? (\r\n              <div className=\"QuipErrorWrapper\">\r\n                <p>Please check your connection and reload this page.</p>\r\n              </div>\r\n            ) : quips.length ? (\r\n              quips.map((quip, index) => {\r\n                return (\r\n                  <QuipsDisplay\r\n                    quip={quip}\r\n                    key={index}\r\n                    index={index}\r\n                    openQuip={openQuip}\r\n                    setOpenQuip={setOpenQuip}\r\n                  />\r\n                );\r\n              })\r\n            ) : (\r\n              <div className=\"QuipsLoader\">\r\n                <Loading />\r\n              </div>\r\n            )}\r\n            <div className=\"drawer\">\r\n              <PageTitle>Quips</PageTitle>\r\n              <div className=\"handle\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </StandardWrapper>\r\n  );\r\n}\r\n","import imageUrlBuilder from \"@sanity/image-url\";\r\nimport sanityClient from \"../../client\";\r\nconst builder = imageUrlBuilder(sanityClient);\r\n\r\n/**\r\n * @function imageUrl\r\n * @description Handles pulling in the sanity client and image url builder to\r\n * create an object that makes pulling sanity images easier.\r\n * @param {object} source The source for the image to load from Sanity.\r\n * @returns {object}\r\n * @author Alexander Burdiss\r\n * @since 2/19/22\r\n * @version 1.0.0\r\n */\r\nexport function imageUrl(source) {\r\n  return builder.image(source);\r\n}\r\n","const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n"],"names":["PageTitle","children","className","QuipsDisplay","quip","index","openQuip","setOpenQuip","style","top","onClick","undefined","title","blocks","body","projectId","sanityClient","dataset","author","mainImage","src","imageUrl","url","alt","Quips","useState","quips","setQuips","error","setError","closeModalWhenTabNotClicked","event","modalButtons","Array","from","document","querySelectorAll","modalTitles","buttonClicked","includes","target","titleClicked","useEffect","then","catch","window","addEventListener","removeEventListener","StandardWrapper","SEO","length","map","Loading","builder","imageUrlBuilder","source","image","const","example","parseAssetId","ref","id","dimensionString","format","Error","width","imgWidthStr","height","imgHeightStr","isFinite","isRef","isAsset","isAssetStub","parseSource","isUrl","asset","_ref","urlToId","img","applyDefaults","test","result","left","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","options","spec","JSON","cropLeft","Math","cropTop","crop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","hotspot","fit","specToImageUrl","cdnUrl","filename","baseUrl","params","rect","bg","flip","mapping","specName","param","encodeURIComponent","imgWidth","imgHeight","desiredAspectRatio","hotspotXCenter","cropRect","hotspotYCenter","validFits","validCrops","validAutoModes","client","specs","entry","key","urlBuilder","isSanityClientLike","clientConfig","apiUrl","ImageUrlBuilder","apiHost","constructor","parent","this","withOptions","newOptions","rewriteSpecName","dpr","focalPoint","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","flipHorizontal","flipVertical","ignoreImageParams","value","saturation","auto","pad","toString"],"sourceRoot":""}